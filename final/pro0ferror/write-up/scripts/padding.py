#!/usr/bin/env python
import json

def ToBytes(bit_stream):
    # TO-DO : Pack with Int Struct instead
    _bytes = bytearray()
    for i in range(0, len(bit_stream), 8):
        c = bit_stream[i:i+8]
        _bytes.append(int(c, 2))
    return _bytes

def GetInterleavingSpecs(version:int, eclvl:str):
    version = str(version)

    with open('./assets/interleaving.json', 'r') as f:
        interleaving = json.load(f)
    try:
        return interleaving[version][eclvl]
    except (KeyError, IndexError) as e:
        print('[-] Can\'t find interleaving Version or ECLevel : ', e)
        exit(1)

# ex : ["01000010","10010110","01110101","00010100","01010100","00100110","00100101","00010100","10000110","11110110","01010101","11010100","01010110","01000111","10100111","01010110","11000110","10010011","00000111","01000000","11000011","00010011","01110101","11101100","00000100","00100011","01110100","00010001","01010111","00110011","10000101","11101100","01100110","01000110","01000110","00010001","01010111","10000110","10000101","11101100","00100111","11110111","00100100","00010001","10010101","11101100","11011011","00000101","00011010","01110100","00101011","01010100","00111000","10011001","00100110","11011010","10111011","01010010","11011100","10010110","01011000","10111100","00011010","01110110","10011001","00111001","01000100","11100001","00111011","00011001","01000101","00000011","00100100","01001010","11111110","10101111","00100111","00010010","01101110","11111111","01000100","10010010","10100000","11000101","00001111","00100000","01111011","11000101","11010000","01000010","00100001","10011101","01110111","00000100","00010111","00000111","01101001","00000000","10001111","00111101","11010100","01101101","01000000","00010100","11001000","11001011","01100011","11110101","01000010","11100110","00001111","11110111","10000101","11111101","10101110","00101010","11110101","00011100","11011000","11010110","10000100","01110111","00110100","00100110","10001010","00010100","11101100","00011001","11011011","10101011","11010111","10001101","10101101","00110101"]
def UninterleaveBlocks(codewords: list[str], blocks_per_group:int):
    """Returns the data codewords in their original reading order, without interleave.
    codewords: List of data and ECC codewords. Can be extracted from QRazyBox (Tools -> Extract QR Information).
    blocks_per_group : Number of blocks per group. Can be found at https://www.thonky.com/qr-code-tutorial/error-correction-table.
    returns: A bit stream containing all ordered DATA bits.
    """
    # Note : The given QR Code has 15 data codewords + 28 ECC codewords for each block
    # Source : https://www.thonky.com/qr-code-tutorial/error-correction-table
    bit_stream = '' # Final bit stream

    for block in range(blocks_per_group):
        for i in range(len(codewords) // blocks_per_group):
            bit_stream += codewords[block + blocks_per_group*i] # offset by block number
    return bit_stream

def RemoveEcc(uninterleaved_bits:str, nb_data_codewords:int, nb_error_codewords:int) -> str:
    """Returns the data codewords from a non-interleaved bit stream.
    codewords: List of data and ECC codewords. Can be extracted from QRazyBox (Tools -> Extract QR Information).
    blocks_per_group : Number of blocks per group. Can be found at https://www.thonky.com/qr-code-tutorial/error-correction-table.
    returns: A bit stream containing only DATA bits.
    """
    data = ''
    nb_blocks = len(uninterleaved_bits) / ((nb_data_codewords+nb_error_codewords) * 8)

    assert nb_blocks.is_integer()
    nb_blocks = int(nb_blocks)

    codewords_per_block = nb_data_codewords + nb_error_codewords

    cwi = 0 # Codeword index 
    for block in range(nb_blocks):
        cwi = 0
        while cwi < nb_data_codewords: # Only reading the first X codewords
            block_offset = block * codewords_per_block # Block byte offset
            i = 8*(block_offset + cwi) # Current codeword bit offset
            data += uninterleaved_bits[i:i+8]
            cwi = cwi + 1

        # Rest of the block is ECC, we skip it
        cwi = cwi + nb_error_codewords

    return data

def ExtractHiddenMsg(codewords, version:int, eclvl:str):
    interleaving_specs = GetInterleavingSpecs(version, eclvl)
    
    assert interleaving_specs["blocksg2"] is None # Only supports 1 group for now

    # Interleaving paramaters
    nb_blocks_g1 = interleaving_specs['blocksg1']
    nb_datacodewords = interleaving_specs['datacodewordsperblockg1']
    nb_errorcodewords = interleaving_specs['errorcodewords']

    uninterleaved_bits = UninterleaveBlocks(codewords, nb_blocks_g1)
    data_bits = RemoveEcc(uninterleaved_bits, nb_datacodewords, nb_errorcodewords)

    encoding = data_bits[:4]
    assert encoding == '0100' # Only supports UTF-8 encoding mode for now

    char_count = int(data_bits[4:12], 2)

    skip = 8*(char_count) + 12 # Skip 12 bits (4 for encoding + 8 for char count)

    assert data_bits[skip:skip+4] == '0000' # Verify EOF marker presence

    hidden_bits = data_bits[skip+4:]

    if len(hidden_bits) > 0:
        print('[+] Found hidden bits at offset {}'.format(skip+4))

    hidden_msg = ToBytes(hidden_bits).decode('utf-8', errors='ignore')

    if len(hidden_msg) > 0:
            original_msg = ToBytes(data_bits[12:skip]).decode('utf-8', errors='ignore')
            print('[+] Original message : {}'.format(original_msg))
            print('[+] Hidden   message : {}'.format(hidden_msg))
            print()
            print('[+] Complete message : {}'.format(original_msg+hidden_msg))
    return hidden_msg
 
if __name__ == '__main__':
    """
    parser = argparse.ArgumentParser( 
                                    description = "Extract data found after the EOF marker of a QRCode.",
                                    epilog = "As an alternative to the commandline, params can be placed in a file, one per line, and specified on the commandline like '%(prog)s @params.conf'.",
                                    fromfile_prefix_chars = '@' )

    parser.add_argument(
                      "codewords",
                      help = "QRCode codewords to extract hidden message from. list[str]",
                      metavar = "codewords")
    parser.add_argument(
                      "blocks",
                      help = "Number of blocks per group. int",
                      metavar = "blocks")
    
    args = parser.parse_args()
    """

                  # TO CHANGE
    CODEWORDS = ["01000010","11100101","00100100","01111010","01010101","01100011","01110101","01011000","00100101","00000101","01100101","00110010","01010100","10000011","01010100","01101100","11100101","00100011","11010011","01010101","10000110","01010111","00010011","01011000","01010011","01100110","10010111","01111010","00100101","01000100","01100110","01000110","10100111","01100011","00010000","01111010","00110100","10010110","01000110","01001001","11100100","10100110","00111001","01011000","01110110","00100011","01001001","00110000","01000110","00100011","01001101","00111101","01100101","00010111","00110011","11101100","10010110","01110110","0100100?","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????","????????"]
    VERSION = 6   # TO CHANGE
    ECCLVL  = 'H' # TO CHANGE
    
    ExtractHiddenMsg(CODEWORDS, VERSION, ECCLVL)